// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name PreferabliDataSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import Alamofire
import Contacts
import CoreData
import CoreLocation
import Foundation
import MagicalRecord
import Mixpanel
import Photos
import Swift
import SwiftEventBus
import UIKit
import _Concurrency
import _StringProcessing
@_hasMissingDesignatedInitializers public class CollectionVersion : PreferabliDataSDK.BaseObject {
  public var name: Swift.String
  public var order: Foundation.NSNumber
  public var collection: PreferabliDataSDK.Collection
  public var groups: [PreferabliDataSDK.CollectionGroup]
  @objc deinit
}
@_hasMissingDesignatedInitializers public class LabelRecResult {
  public var score: Foundation.NSNumber
  public var product: PreferabliDataSDK.Product
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CollectionGroup : PreferabliDataSDK.BaseObject {
  public var name: Swift.String
  public var order: Foundation.NSNumber?
  public var orderings_count: Foundation.NSNumber
  public var orderings: [PreferabliDataSDK.CollectionOrder]
  public var version: PreferabliDataSDK.CollectionVersion
  public static func sortGroups(groups: [PreferabliDataSDK.CollectionGroup]) -> Swift.Array<PreferabliDataSDK.CollectionGroup>
  @objc deinit
}
public enum CollectionType {
  case EVENT
  case INVENTORY
  case CELLAR
  case OTHER
  public static func == (a: PreferabliDataSDK.CollectionType, b: PreferabliDataSDK.CollectionType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ShippingType {
  case SHIPPING
  case LOCAL_DELIVERY
  case PICKUP
  public func compare(_ other: PreferabliDataSDK.TagType) -> Foundation.ComparisonResult
  public static func == (a: PreferabliDataSDK.ShippingType, b: PreferabliDataSDK.ShippingType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class PreferenceStyle : PreferabliDataSDK.BaseObject {
  public var conflict: Swift.Bool
  public var order_profile: Foundation.NSNumber
  public var order_recommend: Foundation.NSNumber
  public var rating: Foundation.NSNumber
  public var strength: Foundation.NSNumber
  public var style_id: Foundation.NSNumber
  public var recommend: Swift.Bool
  public var refine: Swift.Bool
  public var style: PreferabliDataSDK.Style
  public var keywords: Swift.String?
  public var created_at: Foundation.Date
  public var profile: PreferabliDataSDK.Profile
  public func getRatingType() -> PreferabliDataSDK.RatingType
  public func isUnappealing() -> Swift.Bool
  public func isAppealing() -> Swift.Bool
  public static func sortPreferenceStylesByDate(preference_styles: [PreferabliDataSDK.PreferenceStyle], comparison_result: Foundation.ComparisonResult = .orderedDescending) -> Swift.Array<PreferabliDataSDK.PreferenceStyle>
  public static func sortPreferenceStylesAlpha(preference_styles: [PreferabliDataSDK.PreferenceStyle], comparison_result: Foundation.ComparisonResult) -> Swift.Array<PreferabliDataSDK.PreferenceStyle>
  public static func filterPreferenceStyles(preference_styles: Swift.Array<PreferabliDataSDK.PreferenceStyle>, search_text: Swift.String) -> Swift.Array<PreferabliDataSDK.PreferenceStyle>
  @objc deinit
}
@_hasMissingDesignatedInitializers public class VenueHour : PreferabliDataSDK.BaseObject {
  public var weekday: Swift.String?
  public var open_time: Swift.String?
  public var close_time: Swift.String?
  public var is_closed: Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Variant : PreferabliDataSDK.BaseObject {
  public static let CURRENT_VARIANT_YEAR: Foundation.NSNumber
  public static let NON_VARIANT: Foundation.NSNumber
  public var created_at: Foundation.Date?
  public var fresh: Swift.Bool
  public var num_dollar_signs: Foundation.NSNumber
  public var price: Swift.Double
  public var recommendable: Swift.Bool
  public var updated_at: Foundation.Date?
  public var year: Foundation.NSNumber
  public var primary_image: PreferabliDataSDK.Media?
  public var product: PreferabliDataSDK.Product
  public var tags: [PreferabliDataSDK.Tag]
  public var merchant_links: [PreferabliDataSDK.MerchantProductLink]?
  public func getPrice() -> Swift.String
  public func getImage() -> Swift.String
  public func getTagWithId(id: Foundation.NSNumber) -> PreferabliDataSDK.Tag?
  public func isOnWishlist() -> Swift.Bool
  @objc deinit
}
extension PreferabliDataSDK.Variant {
  public func whereToBuy(fulfill_sort: PreferabliDataSDK.FulfillSort = FulfillSort.init(), append_nonconforming_results: Swift.Bool = true, lock_to_integration: Swift.Bool = true, onCompletion: @escaping (PreferabliDataSDK.WhereToBuy) -> () = {_ in }, onFailure: @escaping (PreferabliDataSDK.PreferabliException) -> () = {_ in })
  public func toggleWishlist(onCompletion: @escaping (PreferabliDataSDK.Product) -> () = {_ in }, onFailure: @escaping (PreferabliDataSDK.PreferabliException) -> () = {_ in })
  public func rate(rating: PreferabliDataSDK.RatingType, location: Swift.String? = nil, notes: Swift.String? = nil, price: Foundation.NSNumber? = nil, quantity: Foundation.NSNumber? = nil, format_ml: Foundation.NSNumber? = nil, onCompletion: @escaping (PreferabliDataSDK.Product) -> () = {_ in }, onFailure: @escaping (PreferabliDataSDK.PreferabliException) -> () = {_ in })
  public func lttt(collection_id: Foundation.NSNumber = Preferabli.getPrimaryInventoryId(), onCompletion: @escaping ([PreferabliDataSDK.Product]) -> () = {_ in }, onFailure: @escaping (PreferabliDataSDK.PreferabliException) -> () = {_ in })
  public func getPreferabliScore(force_refresh: Swift.Bool = false, onCompletion: @escaping (PreferabliDataSDK.PreferenceData) -> () = {_ in }, onFailure: @escaping (PreferabliDataSDK.PreferabliException) -> () = {_ in })
}
@_hasMissingDesignatedInitializers public class GuidedRecChoice : PreferabliDataSDK.BaseObject {
  public var number: Foundation.NSNumber
  public var requires_choice_ids: [Foundation.NSNumber]?
  public var text: Swift.String?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Style : PreferabliDataSDK.BaseObject {
  public var desc: Swift.String
  public var name: Swift.String
  public var order: Foundation.NSNumber
  public var type: Swift.String
  public var primary_image_url: Swift.String?
  public var product_category: Swift.String
  public var locations: [PreferabliDataSDK.Location]
  public func getImage() -> Swift.String
  public func getProductType() -> PreferabliDataSDK.ProductType
  public func getProductCategory() -> PreferabliDataSDK.ProductCategory
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Collection : PreferabliDataSDK.BaseObject {
  public var channel_id: Foundation.NSNumber?
  public var code: Swift.String?
  public var desc: Swift.String?
  public var end_date: Foundation.Date?
  public var updated_at: Foundation.Date
  public var display_time: Swift.Bool
  public var is_browsable: Swift.Bool
  public var is_my_cellar: Swift.Bool
  public var product_count: Foundation.NSNumber
  public var name: Swift.String
  public var badge_method: Swift.String
  public var currency: Swift.String
  public var timezone: Swift.String
  public var `public`: Swift.Bool
  public var published: Swift.Bool
  public var archived: Swift.Bool
  public var display_price: Swift.Bool
  public var display_quantity: Swift.Bool
  public var display_bin: Swift.Bool
  public var has_predict_order: Swift.Bool
  public var is_randomized: Swift.Bool
  public var display_group_headings: Swift.Bool
  public var is_blind: Swift.Bool
  public var start_date: Foundation.Date?
  public var venue_id: Foundation.NSNumber?
  public var primary_image: PreferabliDataSDK.Media?
  public var venue: PreferabliDataSDK.Venue?
  public var versions: [PreferabliDataSDK.CollectionVersion]
  public var sort_channel_name: Swift.String
  public func getImage() -> Swift.String
  public func getStartDate() -> Foundation.Date?
  public func getUpdatedDate() -> Foundation.Date
  public func getExpirationDate() -> Foundation.Date?
  public static func filterToInventories(collections: Swift.Array<PreferabliDataSDK.Collection>) -> [PreferabliDataSDK.Collection]
  public static func sortCollectionsByLastUpdated(collections: Swift.Array<PreferabliDataSDK.Collection>, comparison_result: Foundation.ComparisonResult = .orderedDescending) -> [PreferabliDataSDK.Collection]
  public static func sortCollectionsAlpha(collections: Swift.Array<PreferabliDataSDK.Collection>, comparison_result: Foundation.ComparisonResult = .orderedAscending) -> [PreferabliDataSDK.Collection]
  public static func filterCollections(collections: Swift.Array<PreferabliDataSDK.Collection>, search_text: Swift.String) -> Swift.Array<PreferabliDataSDK.Collection>
  public func isInventory() -> Swift.Bool
  public func isEvent() -> Swift.Bool
  @objc deinit
}
public enum TagType {
  case RATING
  case CELLAR
  case PURCHASE
  case WISHLIST
  case OTHER
  public func compare(_ other: PreferabliDataSDK.TagType) -> Foundation.ComparisonResult
  public static func == (a: PreferabliDataSDK.TagType, b: PreferabliDataSDK.TagType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ProductType {
  case RED
  case WHITE
  case ROSE
  case SPARKLING
  case FORTIFIED
  case OTHER
  public func isWine() -> Swift.Bool
  public static func == (a: PreferabliDataSDK.ProductType, b: PreferabliDataSDK.ProductType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class Profile : PreferabliDataSDK.BaseObject {
  public var user_id: Foundation.NSNumber
  public var customer_id: Foundation.NSNumber
  public var score: Foundation.NSNumber
  public var preference_styles: [PreferabliDataSDK.PreferenceStyle]
  @objc deinit
}
@_hasMissingDesignatedInitializers public class GuidedRec : PreferabliDataSDK.BaseObject {
  public static let WINE_DEFAULT: Swift.Int
  public var name: Swift.String?
  public var default_currency: Swift.String?
  public var default_price_min: Foundation.NSNumber?
  public var default_price_max: Foundation.NSNumber?
  public var max_results_per_type: Foundation.NSNumber?
  public var questions: [PreferabliDataSDK.GuidedRecQuestion]
  @objc deinit
}
public enum ProductCategory {
  case WHISKEY
  case MEZCAL
  case BEER
  case WINE
  case NONE
  public static func == (a: PreferabliDataSDK.ProductCategory, b: PreferabliDataSDK.ProductCategory) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class DeliveryMethod : PreferabliDataSDK.BaseObject {
  public var shipping_type: Swift.String
  public var state_abbreviation: Swift.String?
  public var state_display_name: Swift.String?
  public var country: Swift.String?
  public var shipping_cost_note: Swift.String?
  public var shipping_speed_note: Swift.String?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Tag : PreferabliDataSDK.BaseObject {
  public var collection_id: Foundation.NSNumber
  public var comment: Swift.String?
  public var created_at: Foundation.Date
  public var location: Swift.String?
  public var badge: Swift.String?
  public var tagged_in_collection_id: Foundation.NSNumber?
  public var tagged_in_channel_id: Foundation.NSNumber?
  public var tagged_in_channel_name: Swift.String?
  public var type: Swift.String
  public var updated_at: Foundation.Date
  public var user_id: Foundation.NSNumber
  public var value: Swift.String?
  public var bin: Swift.String?
  public var variant_id: Foundation.NSNumber
  public var product_id: Foundation.NSNumber
  public var quantity: Foundation.NSNumber?
  public var format_ml: Foundation.NSNumber?
  public var price: Foundation.NSNumber?
  public var variant: PreferabliDataSDK.Variant?
  public static func sortTagsByDate(tags: Swift.Array<PreferabliDataSDK.Tag>) -> [PreferabliDataSDK.Tag]
  public func getPrice(currency_code: Swift.String = (Locale.current.currencySymbol ?? "USD")) -> Swift.String
  @objc deinit
}
extension PreferabliDataSDK.Tag {
  public func delete(onCompletion: @escaping (PreferabliDataSDK.Product) -> () = {_ in }, onFailure: @escaping (PreferabliDataSDK.PreferabliException) -> () = {_ in })
  public func edit(year: Foundation.NSNumber, rating: PreferabliDataSDK.RatingType = .NONE, location: Swift.String? = nil, notes: Swift.String? = nil, price: Foundation.NSNumber? = nil, quantity: Foundation.NSNumber? = nil, format_ml: Foundation.NSNumber? = nil, onCompletion: @escaping (PreferabliDataSDK.Product) -> () = {_ in }, onFailure: @escaping (PreferabliDataSDK.PreferabliException) -> () = {_ in })
}
@_hasMissingDesignatedInitializers public class MerchantProductLink : PreferabliDataSDK.BaseObject {
  public var variant_id: Foundation.NSNumber?
  public var product_id: Foundation.NSNumber?
  public var merchant_variant_id: Swift.String?
  public var merchant_product_id: Swift.String?
  public var price_currency: Swift.String?
  public var year: Foundation.NSNumber?
  public var format_ml: Foundation.NSNumber?
  public var landing_url: Swift.String?
  public var product_name: Swift.String?
  public var price: Swift.String?
  public var venues: [PreferabliDataSDK.Venue]?
  public var nonconforming_result: Swift.Bool
  public static func filterLinks(lookups: Swift.Array<PreferabliDataSDK.MerchantProductLink>, search_text: Swift.String) -> Swift.Array<PreferabliDataSDK.MerchantProductLink>
  public func getVenues() -> Swift.Array<PreferabliDataSDK.Venue>
  public static func sortLinksByPrice(links: Swift.Array<PreferabliDataSDK.MerchantProductLink>, ascending: Swift.Bool = true) -> [PreferabliDataSDK.MerchantProductLink]
  public func getFormattedPrice() -> Swift.String
  @objc deinit
}
extension PreferabliDataSDK.MerchantProductLink {
  public func whereToBuy(fulfill_sort: PreferabliDataSDK.FulfillSort = FulfillSort.init(), append_nonconforming_results: Swift.Bool = true, lock_to_integration: Swift.Bool = true, onCompletion: @escaping (PreferabliDataSDK.WhereToBuy) -> () = {_ in }, onFailure: @escaping (PreferabliDataSDK.PreferabliException) -> () = {_ in })
}
public struct PreferabliException : Swift.Error {
  public func getMessage() -> Swift.String
  public func getCode() -> Swift.Int
}
public enum PreferabliExceptionType {
  case APIError
  case NetworkError
  case UnknownError
  case JSONError
  case AlreadyLoaded
  case BadData
  case InvalidAccessToken
  case InvalidClientInterface
  case InvalidIntegrationId
  case DatabaseError
  case MappingNotFound
  public func getMessage() -> Swift.String
  public static func == (a: PreferabliDataSDK.PreferabliExceptionType, b: PreferabliDataSDK.PreferabliExceptionType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum RatingType {
  case LOVE
  case LIKE
  case SOSO
  case DISLIKE
  case NONE
  public func compare(_ other: PreferabliDataSDK.RatingType) -> Foundation.ComparisonResult
  public static func == (a: PreferabliDataSDK.RatingType, b: PreferabliDataSDK.RatingType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class Location : PreferabliDataSDK.BaseObject {
  public var latitude: Foundation.NSNumber?
  public var longitude: Foundation.NSNumber?
  public var zip_code: Swift.String?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class BaseObject : Swift.Hashable {
  public var id: Foundation.NSNumber
  public static func == (lhs: PreferabliDataSDK.BaseObject, rhs: PreferabliDataSDK.BaseObject) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class Venue : PreferabliDataSDK.BaseObject {
  public var address_l1: Swift.String?
  public var address_l2: Swift.String?
  public var city: Swift.String?
  public var country: Swift.String?
  public var display_name: Swift.String
  public var lat: Foundation.NSNumber?
  public var lon: Foundation.NSNumber?
  public var primary_inventory_id: Foundation.NSNumber?
  public var featured_collection_id: Foundation.NSNumber?
  public var is_virtual: Swift.Bool
  public var name: Swift.String?
  public var phone: Swift.String?
  public var email_address: Swift.String?
  public var state: Swift.String?
  public var url: Swift.String?
  public var url_facebook: Swift.String?
  public var url_instagram: Swift.String?
  public var url_twitter: Swift.String?
  public var url_youtube: Swift.String?
  public var zip_code: Swift.String?
  public var notes: Swift.String?
  public var images: [PreferabliDataSDK.Media]
  public var hours: [PreferabliDataSDK.VenueHour]
  public var links: [PreferabliDataSDK.MerchantProductLink]
  public var active_delivery_methods: [PreferabliDataSDK.DeliveryMethod]
  public func getDistanceInMiles(your_lat: Foundation.NSNumber, your_lon: Foundation.NSNumber) -> Swift.Int?
  public func getFormattedAddress(one_line: Swift.Bool) -> Swift.String
  public func getCityState() -> Swift.String
  public func getShippingSpeedNote() -> Swift.String?
  public func getShippingCostNote() -> Swift.String?
  public func getHasShipping() -> Swift.Bool
  public func getHasLocalDelivery() -> Swift.Bool
  public func getHasPickup() -> Swift.Bool
  public func getOpenTime(weekday: PreferabliDataSDK.Weekday) -> Swift.String?
  public func getCloseTime(weekday: PreferabliDataSDK.Weekday) -> Swift.String
  public func getIsClosed(weekday: PreferabliDataSDK.Weekday) -> Swift.Bool
  public static func filterVenues(venues: Swift.Array<PreferabliDataSDK.Venue>, search_text: Swift.String) -> Swift.Array<PreferabliDataSDK.Venue>
  public func getFacebookUrl() -> Swift.String
  public func getInstagramUrl() -> Swift.String
  public func getTwitterUrl() -> Swift.String
  public func getYoutubeUrl() -> Swift.String
  public static func sortVenuesByDistance(venues: [PreferabliDataSDK.Venue], ascending: Swift.Bool, your_lat: Foundation.NSNumber, your_lon: Foundation.NSNumber) -> Swift.Array<PreferabliDataSDK.Venue>
  @objc deinit
}
public enum Weekday {
  case MONDAY
  case TUESDAY
  case WEDNESDAY
  case THURSDAY
  case FRIDAY
  case SATURDAY
  case SUNDAY
  case NONE
  public func compare(_ other: PreferabliDataSDK.Weekday) -> Foundation.ComparisonResult
  public static func == (a: PreferabliDataSDK.Weekday, b: PreferabliDataSDK.Weekday) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class Media : PreferabliDataSDK.BaseObject {
  public var created_at: Foundation.Date?
  public var path: Swift.String
  public var type: Swift.String?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Food : PreferabliDataSDK.BaseObject {
  public var name: Swift.String
  public var desc: Swift.String
  public var keywords: Swift.String?
  public var food_category_id: Foundation.NSNumber?
  public var food_category_name: Swift.String?
  public var food_category_url: Swift.String?
  public static func sortFoodsAlpha(foods: [PreferabliDataSDK.Food]) -> Swift.Array<PreferabliDataSDK.Food>
  public static func filterFoods(foods: Swift.Array<PreferabliDataSDK.Food>, search_text: Swift.String) -> Swift.Array<PreferabliDataSDK.Food>
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Preferabli {
  public static var main: PreferabliDataSDK.Preferabli
  public static var PRIMARY_INVENTORY_ID: Foundation.NSNumber
  public static var CHANNEL_ID: Foundation.NSNumber
  public static func initialize(client_interface: Swift.String, integration_id: Foundation.NSNumber, logging_enabled: Swift.Bool = false)
  public static func isPreferabliUserLoggedIn() -> Swift.Bool
  public static func isCustomerLoggedIn() -> Swift.Bool
  public static func getPrimaryInventoryId() -> Foundation.NSNumber
  public static func getPoweredByPreferabliLogo(light_background: Swift.Bool) -> UIKit.UIImage
  public func loginCustomer(merchant_customer_identification: Swift.String, merchant_customer_verification: Swift.String, onCompletion: @escaping (PreferabliDataSDK.Customer) -> () = {_ in }, onFailure: @escaping (PreferabliDataSDK.PreferabliException) -> () = {_ in })
  public func loginPreferabliUser(email: Swift.String, password: Swift.String, onCompletion: @escaping (PreferabliDataSDK.PreferabliUser) -> () = {_ in }, onFailure: @escaping (PreferabliDataSDK.PreferabliException) -> () = {_ in })
  public func signupPreferabliUser(email: Swift.String, password: Swift.String, user_claim_code: Swift.String? = nil, cellar_name: Swift.String? = nil, onCompletion: @escaping (PreferabliDataSDK.PreferabliUser) -> () = {_ in }, onFailure: @escaping (PreferabliDataSDK.PreferabliException) -> () = {_ in })
  public func logout(onCompletion: @escaping () -> () = { }, onFailure: @escaping (PreferabliDataSDK.PreferabliException) -> () = {_ in })
  public func forgotPassword(email: Swift.String, onCompletion: @escaping () -> () = { }, onFailure: @escaping (PreferabliDataSDK.PreferabliException) -> () = {_ in })
  public func labelRecognition(image: UIKit.UIImage, include_merchant_links: Swift.Bool = true, onCompletion: @escaping (PreferabliDataSDK.Media, [PreferabliDataSDK.LabelRecResult]) -> () = {_,_  in }, onFailure: @escaping (PreferabliDataSDK.PreferabliException) -> () = {_ in })
  public func searchProducts(query: Swift.String, lock_to_integration: Swift.Bool = false, product_categories: [PreferabliDataSDK.ProductCategory]? = nil, product_types: [PreferabliDataSDK.ProductType]? = nil, include_merchant_links: Swift.Bool = true, onCompletion: @escaping ([PreferabliDataSDK.Product]) -> () = {_ in }, onFailure: @escaping (PreferabliDataSDK.PreferabliException) -> () = {_ in })
  public func getRatedProducts(force_refresh: Swift.Bool = false, include_merchant_links: Swift.Bool = true, onCompletion: @escaping ([PreferabliDataSDK.Product]) -> () = {_ in }, onFailure: @escaping (PreferabliDataSDK.PreferabliException) -> () = {_ in })
  public func getWishlistProducts(force_refresh: Swift.Bool = false, include_merchant_links: Swift.Bool = true, onCompletion: @escaping ([PreferabliDataSDK.Product]) -> () = {_ in }, onFailure: @escaping (PreferabliDataSDK.PreferabliException) -> () = {_ in })
  public func getPurchaseHistory(force_refresh: Swift.Bool = false, lock_to_integration: Swift.Bool = true, include_merchant_links: Swift.Bool = true, onCompletion: @escaping ([PreferabliDataSDK.Product]) -> () = {_ in }, onFailure: @escaping (PreferabliDataSDK.PreferabliException) -> () = {_ in })
  public func getGuidedRec(guided_rec_id: Swift.Int = GuidedRec.WINE_DEFAULT, onCompletion: @escaping (PreferabliDataSDK.GuidedRec) -> () = {_ in }, onFailure: @escaping (PreferabliDataSDK.PreferabliException) -> () = {_ in })
  public func getGuidedRecResults(selected_choice_ids: Swift.Array<Foundation.NSNumber>, price_min: Swift.Int? = nil, price_max: Swift.Int? = nil, collection_id: Foundation.NSNumber? = Preferabli.getPrimaryInventoryId(), include_merchant_links: Swift.Bool = true, onCompletion: @escaping ([PreferabliDataSDK.Product]) -> () = {_ in }, onFailure: @escaping (PreferabliDataSDK.PreferabliException) -> () = {_ in })
  public func lttt(product_id: Foundation.NSNumber, year: Foundation.NSNumber = Variant.CURRENT_VARIANT_YEAR, collection_id: Foundation.NSNumber = Preferabli.getPrimaryInventoryId(), onCompletion: @escaping ([PreferabliDataSDK.Product]) -> () = {_ in }, onFailure: @escaping (PreferabliDataSDK.PreferabliException) -> () = {_ in })
  public static func getPreferabliProductId(merchant_product_id: Swift.String?, merchant_variant_id: Swift.String?) throws -> (Foundation.NSNumber, Foundation.NSNumber)
  public func whereToBuy(product_id: Foundation.NSNumber, fulfill_sort: PreferabliDataSDK.FulfillSort = FulfillSort.init(), append_nonconforming_results: Swift.Bool = true, lock_to_integration: Swift.Bool = true, onCompletion: @escaping (PreferabliDataSDK.WhereToBuy) -> () = {_ in }, onFailure: @escaping (PreferabliDataSDK.PreferabliException) -> () = {_ in })
  public func getProfile(force_refresh: Swift.Bool = false, onCompletion: @escaping (PreferabliDataSDK.Profile) -> () = {_ in }, onFailure: @escaping (PreferabliDataSDK.PreferabliException) -> () = {_ in })
  public func getFoods(force_refresh: Swift.Bool = false, onCompletion: @escaping ([PreferabliDataSDK.Food]) -> () = {_ in }, onFailure: @escaping (PreferabliDataSDK.PreferabliException) -> () = {_ in })
  public func getRecs(product_category: PreferabliDataSDK.ProductCategory, product_type: PreferabliDataSDK.ProductType, price_min: Swift.Int? = nil, price_max: Swift.Int? = nil, collection_id: Foundation.NSNumber = Preferabli.getPrimaryInventoryId(), style_ids: [Foundation.NSNumber]? = nil, food_ids: [Foundation.NSNumber]? = nil, include_merchant_links: Swift.Bool = true, onCompletion: @escaping (Swift.String?, [PreferabliDataSDK.Product]) -> () = {_,_  in }, onFailure: @escaping (PreferabliDataSDK.PreferabliException) -> () = {_ in })
  public func rateProduct(product_id: Foundation.NSNumber, year: Foundation.NSNumber, rating: PreferabliDataSDK.RatingType, location: Swift.String? = nil, notes: Swift.String? = nil, price: Foundation.NSNumber? = nil, quantity: Foundation.NSNumber? = nil, format_ml: Foundation.NSNumber? = nil, onCompletion: @escaping (PreferabliDataSDK.Product) -> () = {_ in }, onFailure: @escaping (PreferabliDataSDK.PreferabliException) -> () = {_ in })
  public func wishlistProduct(product_id: Foundation.NSNumber, year: Foundation.NSNumber, location: Swift.String? = nil, notes: Swift.String? = nil, price: Foundation.NSNumber? = nil, format_ml: Foundation.NSNumber? = nil, onCompletion: @escaping (PreferabliDataSDK.Product) -> () = {_ in }, onFailure: @escaping (PreferabliDataSDK.PreferabliException) -> () = {_ in })
  public func deleteTag(tag_id: Foundation.NSNumber, onCompletion: @escaping (PreferabliDataSDK.Product) -> () = {_ in }, onFailure: @escaping (PreferabliDataSDK.PreferabliException) -> () = {_ in })
  public func getPreferabliScore(product_id: Foundation.NSNumber, year: Foundation.NSNumber = Variant.CURRENT_VARIANT_YEAR, onCompletion: @escaping (PreferabliDataSDK.PreferenceData) -> () = {_ in }, onFailure: @escaping (PreferabliDataSDK.PreferabliException) -> () = {_ in })
  public func editTag(tag_id: Foundation.NSNumber, tag_type: PreferabliDataSDK.TagType, year: Foundation.NSNumber, rating: PreferabliDataSDK.RatingType = .NONE, location: Swift.String? = nil, notes: Swift.String? = nil, price: Foundation.NSNumber? = nil, quantity: Foundation.NSNumber? = nil, format_ml: Foundation.NSNumber? = nil, onCompletion: @escaping (PreferabliDataSDK.Product) -> () = {_ in }, onFailure: @escaping (PreferabliDataSDK.PreferabliException) -> () = {_ in })
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Customer : PreferabliDataSDK.BaseObject {
  public var avatar_url: Swift.String?
  public var merchant_user_email_address: Swift.String?
  public var merchant_user_id: Swift.String?
  public var merchant_user_name: Swift.String?
  public var merchant_user_display_name: Swift.String?
  public var role: Swift.String?
  public var user_id: Foundation.NSNumber?
  public var has_profile: Swift.Bool
  public var claim_code: Swift.String?
  public var ratings_collection_id: Swift.Int
  public func getName() -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Product : PreferabliDataSDK.BaseObject {
  public var brand: Swift.String
  public var created_at: Foundation.Date?
  public var decant: Swift.Bool
  public var grape: Swift.String
  public var brand_lat: Foundation.NSNumber?
  public var brand_lon: Foundation.NSNumber?
  public var show_year_dropdown: Swift.Bool
  public var name: Swift.String
  public var region: Swift.String
  public var type: Swift.String
  public var category: Swift.String
  public var subcategory: Swift.String
  public var updated_at: Foundation.Date?
  public var primary_image: PreferabliDataSDK.Media?
  public var variants: [PreferabliDataSDK.Variant]
  public var brand_id: Foundation.NSNumber?
  public func wasPurchased() -> Swift.Bool
  public func isOnWishlist() -> Swift.Bool
  public func isInCellar() -> Swift.Bool
  public func isBeingIdentified() -> Swift.Bool
  public func getImage() -> Swift.String
  public func getPrice() -> Swift.String
  public func getVariantWithId(id: Foundation.NSNumber) -> PreferabliDataSDK.Variant?
  public func getVariantWithYear(year: Foundation.NSNumber) -> PreferabliDataSDK.Variant?
  public static func filterProducts(products: Swift.Array<PreferabliDataSDK.Product>, search_text: Swift.String) -> Swift.Array<PreferabliDataSDK.Product>
  @objc deinit
}
extension PreferabliDataSDK.Product {
  public func whereToBuy(fulfill_sort: PreferabliDataSDK.FulfillSort = FulfillSort.init(), append_nonconforming_results: Swift.Bool = true, lock_to_integration: Swift.Bool = true, onCompletion: @escaping (PreferabliDataSDK.WhereToBuy) -> () = {_ in }, onFailure: @escaping (PreferabliDataSDK.PreferabliException) -> () = {_ in })
  public func toggleWishlist(onCompletion: @escaping (PreferabliDataSDK.Product) -> () = {_ in }, onFailure: @escaping (PreferabliDataSDK.PreferabliException) -> () = {_ in })
  public func rate(rating: PreferabliDataSDK.RatingType, location: Swift.String? = nil, notes: Swift.String? = nil, price: Foundation.NSNumber? = nil, quantity: Foundation.NSNumber? = nil, format_ml: Foundation.NSNumber? = nil, onCompletion: @escaping (PreferabliDataSDK.Product) -> () = {_ in }, onFailure: @escaping (PreferabliDataSDK.PreferabliException) -> () = {_ in })
  public func lttt(collection_id: Foundation.NSNumber = Preferabli.getPrimaryInventoryId(), onCompletion: @escaping ([PreferabliDataSDK.Product]) -> () = {_ in }, onFailure: @escaping (PreferabliDataSDK.PreferabliException) -> () = {_ in })
  public func getPreferabliScore(force_refresh: Swift.Bool = false, onCompletion: @escaping (PreferabliDataSDK.PreferenceData) -> () = {_ in }, onFailure: @escaping (PreferabliDataSDK.PreferabliException) -> () = {_ in })
}
public class Sort {
  public var type: PreferabliDataSDK.SortType
  public var ascending: Swift.Bool
  public init(type: PreferabliDataSDK.SortType, ascending: Swift.Bool)
  @objc deinit
}
public enum SortType {
  case PRICE
  case DATE
  case ALPHABETICAL
  case REGION
  case GRAPE
  case RATING
  case TYPE
  case LAST_UPDATED
  case DISTANCE
  case DEFAULT
  public static func == (a: PreferabliDataSDK.SortType, b: PreferabliDataSDK.SortType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class FulfillSort : PreferabliDataSDK.Sort {
  public var include_shipping: Swift.Bool
  public var include_delivery: Swift.Bool
  public var include_pickup: Swift.Bool
  public var variant_year: Foundation.NSNumber
  public var distance_miles: Foundation.NSNumber
  public var location: PreferabliDataSDK.Location?
  public init(type: PreferabliDataSDK.SortType = SortType.PRICE, ascending: Swift.Bool = true, include_shipping: Swift.Bool = true, include_delivery: Swift.Bool = true, include_pickup: Swift.Bool = true, variant_year: Foundation.NSNumber = Variant.NON_VARIANT, distance_miles: Foundation.NSNumber = NSNumber.init(value: 75), location: PreferabliDataSDK.Location? = nil)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class WhereToBuy {
  public var links: [PreferabliDataSDK.MerchantProductLink]
  public var venues: [PreferabliDataSDK.Venue]
  @objc deinit
}
@_hasMissingDesignatedInitializers public class GuidedRecQuestion : PreferabliDataSDK.BaseObject {
  public var number: Foundation.NSNumber?
  public var choices: [PreferabliDataSDK.GuidedRecChoice]
  public var type: Swift.String?
  public var minimum_selected: Foundation.NSNumber?
  public var maximum_selected: Foundation.NSNumber?
  public var text: Swift.String?
  @objc deinit
}
extension Foundation.NSAttributedString {
  public func isEmptyOrWhitespace() -> Swift.Bool
}
extension Swift.String {
  public func containsIgnoreCase(_ string: Swift.String) -> Swift.Bool
  public func isEmptyOrWhitespace() -> Swift.Bool
  public func capitalizingFirstLetter() -> Swift.String
  public mutating func capitalizeFirstLetter()
  public func lowercasingFirstLetter() -> Swift.String
  public mutating func lowercaseFirstLetter()
  public var forSorting: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class PreferenceData {
  public var title: Swift.String?
  public var details: Swift.String?
  public var formatted_predict_rating: Swift.Int?
  public func getMessage() -> Swift.String
  @objc deinit
}
extension Foundation.URL {
  public var queryItems: [Swift.String : Swift.String]? {
    get
  }
}
@_hasMissingDesignatedInitializers public class PreferabliUser : PreferabliDataSDK.BaseObject {
  public var account_level: Foundation.NSNumber?
  public var birthyear: Foundation.NSNumber?
  public var country: Swift.String?
  public var display_name: Swift.String?
  public var email: Swift.String?
  public var is_team_ringit: Swift.Bool
  public var fname: Swift.String?
  public var gender: Swift.String?
  public var lname: Swift.String?
  public var location: Swift.String?
  public var claim_code: Swift.String?
  public var subscribed: Swift.Bool?
  public var zip_code: Swift.String?
  public var avatar: PreferabliDataSDK.Media?
  public var rating_collection_id: Foundation.NSNumber?
  public var wishlist_collection_id: Foundation.NSNumber?
  public func getImage() -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CollectionOrder : PreferabliDataSDK.BaseObject {
  public var tag_id: Foundation.NSNumber
  public var order: Foundation.NSNumber
  public var group: PreferabliDataSDK.CollectionGroup
  public var tag: PreferabliDataSDK.Tag?
  public var group_id: Foundation.NSNumber
  @objc deinit
}
extension PreferabliDataSDK.CollectionType : Swift.Equatable {}
extension PreferabliDataSDK.CollectionType : Swift.Hashable {}
extension PreferabliDataSDK.ShippingType : Swift.Equatable {}
extension PreferabliDataSDK.ShippingType : Swift.Hashable {}
extension PreferabliDataSDK.TagType : Swift.Equatable {}
extension PreferabliDataSDK.TagType : Swift.Hashable {}
extension PreferabliDataSDK.ProductType : Swift.Equatable {}
extension PreferabliDataSDK.ProductType : Swift.Hashable {}
extension PreferabliDataSDK.ProductCategory : Swift.Equatable {}
extension PreferabliDataSDK.ProductCategory : Swift.Hashable {}
extension PreferabliDataSDK.PreferabliExceptionType : Swift.Equatable {}
extension PreferabliDataSDK.PreferabliExceptionType : Swift.Hashable {}
extension PreferabliDataSDK.RatingType : Swift.Equatable {}
extension PreferabliDataSDK.RatingType : Swift.Hashable {}
extension PreferabliDataSDK.Weekday : Swift.Equatable {}
extension PreferabliDataSDK.Weekday : Swift.Hashable {}
extension PreferabliDataSDK.SortType : Swift.Equatable {}
extension PreferabliDataSDK.SortType : Swift.Hashable {}
