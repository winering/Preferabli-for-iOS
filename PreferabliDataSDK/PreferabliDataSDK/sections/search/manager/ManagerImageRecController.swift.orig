//
//  ViewController.swift
//  Wine Ring
//
//  Created by Nicholas Bortolussi on 10/4/16.
//  Copyright Â© 2017 RingIT, Inc. All rights reserved.
//
import UIKit
import AVFoundation
import CoreData
import Photos
import SwiftEventBus

open class ManagerImageRecController: BaseController, UIImagePickerControllerDelegate, UINavigationControllerDelegate, ConfirmationDelegate, AVCapturePhotoCaptureDelegate, ManagerWineMatchDelegate, ImageEditMatchDelegate {
    
    @IBOutlet public weak var captureView: UIView!
    @IBOutlet public weak var greenOutline: UIImageView!
    @IBOutlet public weak var gallery: UIImageView!
    @IBOutlet public weak var flashButton: UIButton!
    @IBOutlet public weak var multiButton: UIButton!
    @IBOutlet public weak var doneButton: WRButton!
    @IBOutlet public weak var captureButton: UIButton!

    let dispatchGroup = DispatchGroup()
    public var previewLayer : AVCaptureVideoPreviewLayer?
    public var shouldSaveToCameraRoll = false
    public var collectionGroup : CollectionGroup?
    public var multiMode = false
    public var images : [UIImage]?
    public var imageMatches : [UIImage : NSManagedObjectID]?
    public var imageMatchesWines : [UIImage : Wine]?
    public var imageRecIds : [UIImage : [NSManagedObjectID]]?
    public var imageInfo : [UIImage : [String : Any?]]?
    public var collection : Collection?
    public var imagePassed : UIImage?
    public var linkedfromImageRec = false
    public var vintage : NSNumber?

    open override func viewDidLoad() {
        super.viewDidLoad()
        
        handleStatus(status: AVCaptureDevice.authorizationStatus(for: AVMediaType.video))
        handleStatusForLibrary(status: PHPhotoLibrary.authorizationStatus())
        
        if (imagePassed != nil) {
            self.savePressed(image: self.imagePassed!, imageEdited: true, vintage: vintage!)
            self.imagePassed = nil
            self.vintage = nil
        }
    }
    
    func showAllowCameraConfirmationDialog() {
        let confirmationController = UIStoryboard(name: "Reusable", bundle: Bundle.init(for: WineRing.self)).instantiateViewController(withIdentifier: "Confirmation") as! ConfirmationController
        confirmationController.modalPresentationStyle = .overCurrentContext
        confirmationController.delegate = self
        confirmationController.identifier = "Allow"
        confirmationController.affirmativeText = WRTools.getString(string: "settings")
        confirmationController.text = WRTools.getString(string: "ios_camera_allow_fail")
        present(confirmationController, animated: true, completion: nil)
    }
    
    func showAllowPhotoAccessConfirmationDialog() {
        let confirmationController = UIStoryboard(name: "Reusable", bundle: Bundle.init(for: WineRing.self)).instantiateViewController(withIdentifier: "Confirmation") as! ConfirmationController
        confirmationController.modalPresentationStyle = .overCurrentContext
        confirmationController.delegate = self
        confirmationController.identifier = "Allow"
        confirmationController.affirmativeText = WRTools.getString(string: "settings")
        confirmationController.text = WRTools.getString(string: "photos_allow_fail")
        present(confirmationController, animated: true, completion: nil)
    }
    
    func handleStatus(status : AVAuthorizationStatus) {
        switch status {
        case.authorized:
            beginSession()
            break
        case.denied:
            showAllowCameraConfirmationDialog()
            break
        case .notDetermined:
            AVCaptureDevice.requestAccess(for: AVMediaType.video, completionHandler: { (granted :Bool) -> Void in
                DispatchQueue.main.async {
                    if (granted) {
                        self.beginSession()
                    }
                }
            })
            break
        case .restricted:
            showAllowCameraConfirmationDialog()
            break
        }
    }
    
    func handleStatusForLibrary(status : PHAuthorizationStatus) {
        switch status {
        case.authorized:
            fetchMostRecentPhoto()
            break
        case.denied:
            showAllowPhotoAccessConfirmationDialog()
            break
<<<<<<< HEAD
        case.limited:
=======
        case .limited:
>>>>>>> hotfix
            showAllowPhotoAccessConfirmationDialog()
            break
        case .notDetermined:
            PHPhotoLibrary.requestAuthorization({ (status: PHAuthorizationStatus) in
                DispatchQueue.main.async {
                    self.handleStatusForLibrary(status: status)
                }
            })
            break
        case .restricted:
            showAllowPhotoAccessConfirmationDialog()
            break
        }
    }
    
    func beginSession() {
        WRTools.startNewWorkThread {
            CameraTools.sharedInstance.openCamera()
            self.previewLayer = AVCaptureVideoPreviewLayer(session: CameraTools.sharedInstance.getCaptureSession())
            self.previewLayer!.videoGravity = AVLayerVideoGravity.resizeAspectFill
            DispatchQueue.main.async {
                self.captureView.layer.addSublayer(self.previewLayer!)
                self.previewLayer!.frame.size = self.captureView.frame.size
                if (CameraTools.sharedInstance.getCaptureDevice() != nil) {
                    self.flashButton.isHidden = !CameraTools.sharedInstance.getCaptureDevice()!.hasTorch
                } else {
                    self.flashButton.isHidden = true
                }
            }
        }
    }
    
    open override func viewDidLayoutSubviews() {
        previewLayer?.frame.size = captureView.frame.size
    }
    
    open override func setupLayout() {
        super.setupLayout()
        
        captureButton.setImage(WRTools.getImage(name: "ic_camera_trigger_colored.png"), for: .normal)
        flashButton.setImage(WRTools.getImage(name: "ic_flash_solid.png"), for: .normal)
        flashButton.setImage(WRTools.getImage(name: "ic_flash_filled.png"), for: .selected)
        multiButton.setImage(WRTools.getImage(name: "ic_camera_multi_colored.png"), for: .normal)
        greenOutline.image = WRTools.getImage(name: "label_frame.png")

        if (CameraTools.sharedInstance.getCaptureDevice() != nil) {
            flashButton.isHidden = !CameraTools.sharedInstance.getCaptureDevice()!.isTorchAvailable
        }
        WRNavigationBar?.setAltImage(image: UIImage.init(named: "ic_keyboard_colored.png")!, target: self, action: #selector(keyboardPressed))
        doneButton.setTitle(WRTools.getString(string: "done"), for: .normal, setSize: true)
        
        
        if (linkedfromImageRec) {
            WRNavigationBar?.setLogoVisible()
            if (UserDefaults.init(suiteName: "WineRing")!.bool(forKey: "WineRingApp")) {
                setupSideMenu()
            } else {
                setupCloseableNavigationBar()
            }
        }
    }
    
    override open func setupNavigationBar() {
        setNavigationBarTitle(title: WRTools.getString(string: "label_recognition"))
    }
        
    @objc open func keyboardPressed() {
            let viewController = getTextSearchController()
            var viewControllers = self.navigationController?.viewControllers
            viewControllers?.removeLast()
            viewControllers?.append(viewController)
            self.navigationController?.setViewControllers(viewControllers!, animated: true)
    }
    
    open func getTextSearchController() -> ManagerTextSearchController {
        let viewController = UIStoryboard(name: "SearchWines", bundle: Bundle.init(for: WineRing.self)).instantiateViewController(withIdentifier: "TextSearch") as! TextSearchController
        object_setClass(viewController, ManagerTextSearchController.self)
        let mts = viewController as! ManagerTextSearchController
        mts.collectionGroup = collectionGroup
        mts.collection = collection
        return mts
    }
    
    @IBAction func galleryClicked() {
        // open gallery
        if UIImagePickerController.isSourceTypeAvailable(UIImagePickerController.SourceType.photoLibrary){
            let imagePicker = UIImagePickerController()
            imagePicker.delegate = self
            imagePicker.sourceType = UIImagePickerController.SourceType.photoLibrary
            imagePicker.allowsEditing = false
            present(imagePicker, animated: true, completion: nil)
        }
    }
    
    public func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) {
        picker.dismiss(animated: true, completion: nil)
        if let image = info[.originalImage] as? UIImage {
            self.shouldSaveToCameraRoll = false
            self.pictureTaken()
            self.resizeAndOrient(image: image)
        }
    }
    
    func resizeAndOrient(image : UIImage) {
        showLoadingView()
        WRTools.startNewWorkThread {
            let newImage = WRTools.resizeImage(image: WRTools.fixOrientation(img: image), newDimension: 1000)!
            DispatchQueue.main.async {
                self.hideLoadingView()
                self.showEditMatchController(image: newImage)
            }
        }
    }
    
    func fetchMostRecentPhoto() {
        let size = gallery.frame.size
        WRTools.startNewWorkThread {
            let imgManager = PHImageManager.default()
            let requestOptions = PHImageRequestOptions()
            requestOptions.isSynchronous = true
            
            let fetchOptions = PHFetchOptions()
            fetchOptions.sortDescriptors = [NSSortDescriptor(key:"creationDate", ascending: true)]
            
            let fetchResult = PHAsset.fetchAssets(with: PHAssetMediaType.image, options: fetchOptions)
            
            if fetchResult.count > 0 {
                imgManager.requestImage(for: fetchResult.object(at: fetchResult.count - 1) as PHAsset, targetSize: size, contentMode: PHImageContentMode.aspectFill, options: requestOptions, resultHandler: { (image, _) in
                    
                    DispatchQueue.main.async {
                        self.gallery.image = image
                    }
                })
            }
        }
    }
    
    @IBAction func takePictureClicked() {
        if (self.previewLayer != nil && self.previewLayer!.connection != nil) {
            let photoSettings = AVCapturePhotoSettings.init()
            self.previewLayer!.connection!.isEnabled = false
            CameraTools.sharedInstance.getStillImageOutput().capturePhoto(with: photoSettings, delegate: self)
        }
    }
    
    public func photoOutput(_ captureOutput: AVCapturePhotoOutput, didFinishProcessingPhoto photoSampleBuffer: CMSampleBuffer?, previewPhoto previewPhotoSampleBuffer: CMSampleBuffer?, resolvedSettings: AVCaptureResolvedPhotoSettings, bracketSettings: AVCaptureBracketedStillImageSettings?, error: Error?) {
        if let photoSampleBuffer = photoSampleBuffer {
            if let imageData = AVCapturePhotoOutput.jpegPhotoDataRepresentation(forJPEGSampleBuffer: photoSampleBuffer, previewPhotoSampleBuffer: previewPhotoSampleBuffer) {
                self.shouldSaveToCameraRoll = true
                self.pictureTaken()
                let image = self.prepareImageForDisplay(image: UIImage.init(data: imageData)!)!
                self.uploadImageAfterTake(image: image)
                self.showEditMatchController(image: image)            }
        }
    }
    
    func uploadImageAfterTake(image : UIImage) {
        if (!multiMode) {
            self.imageRecIds = nil
        }
        WRTools.startNewWorkThread {
            do {
                self.dispatchGroup.wait()
                self.dispatchGroup.enter()
                defer { self.dispatchGroup.leave() }
                let context = NSManagedObjectContext.mr_()
                context.mergePolicy = NSMergeByPropertyObjectTrumpMergePolicy
                
                let imageId = try self.uploadImage(context: context, image: image)
                if (self.imageInfo == nil) {
                    self.imageInfo = [image : ["imageId" : imageId]]
                } else if (self.imageInfo![image] == nil) {
                    self.imageInfo![image] = ["imageId" : imageId]
                } else {
                    self.imageInfo![image]!["imageId"] = imageId
                }
                let imageRecIds = try self.getImageRecs(context: context, imageId: imageId)
                if (self.imageRecIds == nil) {
                    self.imageRecIds = [image : imageRecIds]
                } else {
                    self.imageRecIds![image] = imageRecIds
                }
            } catch {
                // nada
            }
        }
    }
    
    open func showEditMatchController(image : UIImage) {
        if (!multiMode) {
            images?.removeAll()
        }
        let imageDisplay = getEditMatchController()
        imageDisplay.imagePassed = image
        imageDisplay.multi = multiMode
        imageDisplay.delegate = self
        imageDisplay.showOptions = false
        self.navigationController?.pushViewController(imageDisplay, animated: true)
    }
    
    open func getEditMatchController() -> ImageConfirmController {
        let imageDisplay = UIStoryboard(name: "SearchWines", bundle: Bundle.init(for: WineRing.self)).instantiateViewController(withIdentifier: "ImageConfirmController") as! ImageConfirmController
        imageDisplay.showVintage = true
        return imageDisplay
    }
    
    func pictureTaken() {
        if (flashButton.isSelected) {
            do {
                try CameraTools.sharedInstance.getCaptureDevice()?.lockForConfiguration()
                CameraTools.sharedInstance.getCaptureDevice()?.torchMode = AVCaptureDevice.TorchMode.off
            } catch {
                print(error)
            }
            CameraTools.sharedInstance.getCaptureDevice()?.unlockForConfiguration()
        }
    }
    
    func prepareImageForDisplay(image : UIImage) -> UIImage? {
        let image = WRTools.resizeImage(image: image, newDimension: captureView.frame.height)!
        let differenceInWidths = image.size.width - captureView.frame.width
        let rect = CGRect.init(x: (differenceInWidths / 2) + greenOutline.frame.origin.x, y: greenOutline.frame.origin.y - WRNavigationBar!.frame.maxY, width: greenOutline.frame.width, height: greenOutline.frame.height)
        let imageRef = image.cgImage!.cropping(to: rect)
        let finalImage: UIImage = WRTools.resizeImage(image: UIImage(cgImage: imageRef!, scale: image.scale, orientation: image.imageOrientation), newDimension: 1000)!
        return finalImage
    }
    
    @IBAction func flashClicked() {
        if (CameraTools.sharedInstance.getCaptureDevice()?.isTorchAvailable ?? false) {
            do {
                try CameraTools.sharedInstance.getCaptureDevice()?.lockForConfiguration()
                if (flashButton.isSelected) {
                    CameraTools.sharedInstance.getCaptureDevice()?.torchMode = AVCaptureDevice.TorchMode.off
                    flashButton.isSelected = false
                } else {
                    try CameraTools.sharedInstance.getCaptureDevice()?.setTorchModeOn(level: 1.0)
                    flashButton.isSelected = true
                }
            } catch {
                print(error)
            }
            CameraTools.sharedInstance.getCaptureDevice()?.unlockForConfiguration()
        }
    }
    
    public func finishSubmissionProcess() {
        showLoadingView()
        if (multiMode) {
            WRTools.showSnackBar(message: WRTools.getString(string: "batch_submit_success"))
        } else {
            WRTools.showSnackBar(message: WRTools.getString(string: "wine_submitted"))
        }
        let collectionId = self.collectionGroup!.version.collection.id
        let collectionGroupId = self.collectionGroup!.id
        var order = self.collectionGroup!.getOrderForNewEntry()
        WRTools.startNewWorkThread {
            let context = NSManagedObjectContext.mr_()
    context.mergePolicy = NSMergeByPropertyObjectTrumpMergePolicy
            for image in self.images! {
                let info = self.imageInfo![image]!
                let wineId = self.imageMatches == nil ? nil : self.imageMatches![image]
                let vintage = info["vintage"] as! NSNumber
                var tagDictionary = ["id" : WRTools.generateRandomLongId(), "type" : "collection", "collection_id" : collectionId] as [String : Any]
                
                let wineObject : Wine
                let vintageObject : Vintage
                if (wineId != nil) {
                    let wine = Wine.mr_findFirst(with: NSPredicate(format: "self IN %@", [wineId!]), in: context)!
                    tagDictionary["wine_id"] = wine.id
                    wineObject = wine
                    let vintageFromWine = wineObject.getVintageWithYear(year: vintage)
                    if (vintageFromWine == nil) {
                        let vintageDictionary = ["id" : WRTools.generateRandomLongId(), "year" : vintage, "collection_id" : collectionId] as [String : Any]
                        vintageObject = Vintage.mr_import(from: vintageDictionary, in: context)
                        vintageObject.wine = wineObject
                    } else {
                        vintageObject = vintageFromWine!
                        vintageObject.wine = wineObject
                        tagDictionary["vintage_id"] = vintageObject.id
                    }
                } else {
                    var wineDictionary = ["id" : WRTools.generateRandomLongId(), "dirty" : true, "name" : info["name"] as? String ?? "", "grape" : info["grape"] as? String ?? "", "region" : info["geography"] as? String ?? "", "brand" : info["brand"] as? String ?? "", "type" : info["type"] as? String ?? ""] as [String : Any]
                    if let backImage = info["back"] as? UIImage {
                        wineDictionary["back_image"] = backImage.jpegData(compressionQuality: 0.60)!
                    }
                    let vintageDictionary = ["id" : WRTools.generateRandomLongId(), "year" : vintage] as [String : Any]
                    wineObject = Wine.mr_import(from: wineDictionary, in: context)
                    vintageObject = Vintage.mr_import(from: vintageDictionary, in: context)
                    vintageObject.wine = wineObject
                }
                
                if (info["imageId"] != nil) {
                    let primaryImage = Media.mr_createEntity(in: context)
                    primaryImage?.closeLoop = true
                    primaryImage?.id = info["imageId"] as! NSNumber
                    wineObject.primary_image = primaryImage
                }
                
                let tag = Tag.mr_import(from: tagDictionary, in: context)
                tag.vintage = vintageObject
                
                let orderingDictionary = ["id" : WRTools.generateRandomLongId(), "collection_vintage_tag_id" : tag.id, "order" : order, "dirty" : true, "group_id" : collectionGroupId] as [String : Any]
                let collectionVintageOrder = CollectionVintageOrder.mr_import(from: orderingDictionary, in: context)
                collectionVintageOrder.tag = tag
                collectionVintageOrder.vintage = vintageObject
                
                let collectionGroup = CollectionGroup.mr_findFirst(byAttribute: "id", withValue: collectionGroupId, in: context)!
                collectionGroup.addToOrderings(collectionVintageOrder)
                collectionVintageOrder.group = collectionGroup
                context.mr_saveToPersistentStoreAndWait()
                
                // increase order for next entry
                order = order + 1
            }
            
            UserDefaults.init(suiteName: "WineRing")!.set(nil, forKey: "lastUploadedManagerDirty")
            SwiftEventBus.post("resortCollection")
            
            DispatchQueue.main.async {
                // go back to collection details controller
                if (self.navigationController != nil) {
                    let controllers = self.navigationController!.viewControllers
                    var controllerToPopTo : CollectionDetailsController? = nil
                    for controller in controllers {
                        if (controllerToPopTo != nil) {
                            controller.clearMemory()
                        }
                        if let controller = controller as? CollectionDetailsController {
                            controller.scrollToBottom = true
                            controllerToPopTo = controller
                        }
                    }
                    self.navigationController?.popToViewController(controllerToPopTo!, animated: true)
                }
            }
        }
    }
    
    open override func clearMemory() {
        super.clearMemory()
        CameraTools.sharedInstance.closeCamera()
    }
    
    func itemSelected(item: String, object: AnyObject?, view: UIView) {
        // do nada
    }
    
    func finishUpPhoto(image : UIImage, vintage : NSNumber) {
        if (self.imageInfo == nil) {
            self.imageInfo = [image : ["vintage" : vintage]]
        } else if (self.imageInfo![image] == nil) {
            self.imageInfo![image] = ["vintage" : vintage]
        } else {
            self.imageInfo![image]!["vintage"] = vintage
        }
        if (multiMode) {
            WRTools.showSnackBar(message: WRTools.getString(string: "photo_received"))
            resetView(turnTorchBackOn: true)
            multiButton.isHidden = true
            doneButton.isHidden = false
        } else {
            showLoadingView()
            // always wait for result since we want to match if possible.
            WRTools.startNewWorkThread {
                while self.operationQueue.operationCount == 1 {
                    sleep(1)
                }

                DispatchQueue.main.async {
                    self.hideLoadingView()
                    self.finishFinal()
                }
            }
            
        }
    }
    
    open func finishFinal() {
        doneClicked()
    }
    
    public func savePressed(image: UIImage, imageEdited : Bool, vintage: NSNumber) {
        if (self.images == nil || !multiMode) {
            self.images = [image]
        } else {
            self.images!.append(image)
        }
        if (shouldSaveToCameraRoll) {
            UIImageWriteToSavedPhotosAlbum(image, self, nil, nil)
        }
        let operation = BlockOperation()
        finishUpPhoto(image: image, vintage: vintage)
        
        operation.addExecutionBlock { () -> Void in
            do {
                let context = NSManagedObjectContext.mr_()
                context.mergePolicy = NSMergeByPropertyObjectTrumpMergePolicy
                let imageId = try self.uploadImage(context: context, image: image)
                let imageRecIds = try self.getImageRecs(context: context, imageId: imageId)
                if (self.imageRecIds == nil) {
                    self.imageRecIds = [image : imageRecIds]
                } else {
                    self.imageRecIds![image] = imageRecIds
                }
            } catch {
                // nada
            }
        }
        operationQueue.addOperation(operation)
    }
    
    func uploadImage(context : NSManagedObjectContext, image : UIImage) throws -> NSNumber {
        let resizedImage = WRTools.resizeImage(image: image, newDimension: 1000)!
        let imageData = resizedImage.jpegData(compressionQuality: 0.60)!
        var mediaResponse = try WineRing.main.api.getAlamo().syncUpload(url: APIEndpoints.postMedia, data: imageData)
        mediaResponse = try WRTools.continueOrThrowWRException(response: mediaResponse, showError: false)
        let imageDictionary = try WRTools.continueOrThrowJSONException(data: mediaResponse.data!)
        let image = Media.mr_import(from: imageDictionary, in: context)
        context.mr_saveToPersistentStoreAndWait()
        return image.id
    }
    
    func getImageRecs(context : NSManagedObjectContext, imageId : NSNumber) throws -> Array<NSManagedObjectID> {
        var imageRecResponse = try WineRing.main.api.getAlamo().get(APIEndpoints.imageRec, params: ["media_id" : imageId])
        imageRecResponse = try WRTools.continueOrThrowWRException(response: imageRecResponse, showError: false)
        let imageRecDictionaries = try WRTools.continueOrThrowJSONException(data: imageRecResponse.data!) as! NSArray
        var imageRecs = Array<ImageRec>()
        for imageRec in imageRecDictionaries {
            imageRecs.append(ImageRec.mr_import(from: imageRec, in: context))
        }
        context.mr_saveToPersistentStoreAndWait()
        
        return imageRecs.map { $0.objectID }
    }
    
    open override func goBack() {
        if (images != nil && multiMode) {
            let confirmationController = UIStoryboard(name: "Reusable", bundle: Bundle.init(for: WineRing.self)).instantiateViewController(withIdentifier: "Confirmation") as! ConfirmationController
            confirmationController.modalPresentationStyle = .overCurrentContext
            confirmationController.delegate = self
            confirmationController.identifier = "Confirmation"
            confirmationController.affirmativeText = WRTools.getString(string: "okay")
            confirmationController.negativeText = WRTools.getString(string: "cancel")
            confirmationController.text = WRTools.getString(string: "batch_unsaved")
            present(confirmationController, animated: true, completion: nil)
        } else {
            super.goBack()
        }
    }
    
    public func confirmationReceived(identifier: String, affirmative: Bool, object: Any?) {
        if (identifier == "Offline") {
            if (affirmative) {
                let createWineController = UIStoryboard(name: "Wine", bundle: Bundle.init(for: WineRing.self)).instantiateViewController(withIdentifier: "ManagerCreateWine") as! ManagerCreateWineController
                createWineController.imagePassed = self.images?[0]
                createWineController.collectionGroup = collectionGroup
                self.navigationController?.pushViewController(createWineController, animated: true)
            }
            resetView(turnTorchBackOn: false)
        } else if (identifier == "Allow") {
            if (affirmative) {
                WRTools.goToSettings()
            }
        } else if (identifier == "Confirmation" && affirmative) {
            super.goBack()
        }
    }
    
    @IBAction func doneClicked() {
        let image = images![0]
        resetView(turnTorchBackOn: false)
        let wineMatchController = UIStoryboard(name: "SearchWines", bundle: Bundle.init(for: WineRing.self)).instantiateViewController(withIdentifier: "ManagerImageRecMatchPager") as! ManagerImageRecMatchPager
        let viewController = UIStoryboard(name: "SearchWines", bundle: Bundle.init(for: WineRing.self)).instantiateViewController(withIdentifier: "ManagerImageRecMatchController") as! ManagerImageRecMatchController
        viewController.actualImage = image
        viewController.recResults = imageRecIds?[image]
        viewController.info = imageInfo![image]
        viewController.multi = multiMode
        viewController.match = imageMatchesWines?[image]
        viewController.wineMatchProtocol = wineMatchController
        viewController.createWineProtocol = wineMatchController
        viewController.currentWineLocation = images!.firstIndex(of: image)! + 1
        viewController.totalWines = images!.count
        wineMatchController.setViewControllers([viewController], direction: .forward, animated: true, completion: nil)
        wineMatchController.wineMatchDelegate = self
        navigationController?.pushViewController(wineMatchController, animated: true)
    }
    
    func cancelPressed(identifier : Int) {
        resetView(turnTorchBackOn: true)
    }
    
    public func cancelPressed() {
        resetView(turnTorchBackOn: true)
    }
    
    public func resetView(turnTorchBackOn : Bool) {
        self.shouldSaveToCameraRoll = false
        if (self.previewLayer != nil && self.previewLayer!.connection != nil) {
            self.previewLayer!.connection!.isEnabled = true
        }
        if (CameraTools.sharedInstance.getCaptureDevice()?.isTorchAvailable ?? false && flashButton.isSelected) {
            flashButton.isSelected = turnTorchBackOn
            do {
                try CameraTools.sharedInstance.getCaptureDevice()?.lockForConfiguration()
                if (turnTorchBackOn) {
                    try CameraTools.sharedInstance.getCaptureDevice()?.setTorchModeOn(level: 1.0)
                } else {
                    CameraTools.sharedInstance.getCaptureDevice()?.torchMode = AVCaptureDevice.TorchMode.off
                }
            } catch {
                print(error)
            }
            CameraTools.sharedInstance.getCaptureDevice()?.unlockForConfiguration()
        }
    }
    
    @IBAction func multiClicked() {
        images?.removeAll()
        multiMode = !multiMode
        if (multiMode) {
            WRTools.showSnackBar(message: WRTools.getString(string: "switched_multi"))
            multiButton.setImage(UIImage.init(named: "ic_camera_single_colored.png")!, for: .normal)
        } else {
            WRTools.showSnackBar(message: WRTools.getString(string: "switched_single"))
            multiButton.setImage(UIImage.init(named: "ic_camera_multi_colored.png")!, for: .normal)
        }
    }
    
    
    public func getViewControllerBefore(viewController: UIViewController) -> ManagerImageRecMatchController? {
        let resultController = viewController as! ManagerImageRecMatchController
        let previousImageIndex = (images!.firstIndex(of: resultController.actualImage!) ?? 0) - 1
        if (previousImageIndex < 0) {
            return nil
        }
        let image = images![previousImageIndex]
        let viewController = UIStoryboard(name: "SearchWines", bundle: Bundle.init(for: WineRing.self)).instantiateViewController(withIdentifier: "ManagerImageRecMatchController") as! ManagerImageRecMatchController
        viewController.actualImage = image
        viewController.recResults = imageRecIds?[image]
        viewController.multi = multiMode
        viewController.match = imageMatchesWines?[image]
        viewController.info = imageInfo![image]
        viewController.currentWineLocation = images!.firstIndex(of: image)! + 1
        viewController.totalWines = images!.count
        return viewController
    }
    
    public func getViewControllerAfter(viewController: UIViewController) -> ManagerImageRecMatchController? {
        let resultController = viewController as! ManagerImageRecMatchController
        let nextImageIndex = (images!.firstIndex(of: resultController.actualImage!) ?? 500) + 1
        if (images!.count <= nextImageIndex) {
            return nil
        }
        let image = images![nextImageIndex]
        let viewController = UIStoryboard(name: "SearchWines", bundle: Bundle.init(for: WineRing.self)).instantiateViewController(withIdentifier: "ManagerImageRecMatchController") as! ManagerImageRecMatchController
        viewController.actualImage = image
        viewController.recResults = imageRecIds?[image]
        viewController.multi = multiMode
        viewController.match = imageMatchesWines?[image]
        viewController.info = imageInfo![image]
        viewController.currentWineLocation = images!.firstIndex(of: image)! + 1
        viewController.totalWines = images!.count
        return viewController
    }
    
    public func matchSelected(image: UIImage, wine: Wine?) {
        if (imageMatches == nil && wine != nil) {
            imageMatches = [image : wine!.objectID]
            imageMatchesWines = [image : wine!]
        } else if (imageMatches != nil && wine == nil) {
            imageMatches!.removeValue(forKey: image)
            imageMatchesWines!.removeValue(forKey: image)
        } else if (wine != nil) {
            imageMatches![image] = wine!.objectID
            imageMatchesWines![image] = wine!
        }
    }
    
    public func infoEntered(image : UIImage, infoDictionary : [String : Any?]) {
        if (imageInfo == nil) {
            imageInfo = [image : infoDictionary]
        } else {
            imageInfo![image] = infoDictionary
        }
    }
    
    public func getUpdatedInfoDictionary(image : UIImage) -> [String : Any?]? {
        return imageInfo![image]
    }
}

public protocol SelectWineDelegate : class {
    func wineSelected(wine : Wine)
}
